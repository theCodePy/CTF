Forensics:
	101:
		flag: flag{wow!_data_is_cool}
		solution: using strings command to see texts
	
	Talking LS:
		flag: ABCTF{T3Rm1n4l_is_C00l}
		solution: ls -aR,found all hidden directory. found password for a pdf, open password protected pdf
	
	wow... so meta:
		flag: flag{EEe_x_I_FFf}
		solution: use exiftool to found flag in the metadata.

	Binwalk:
		flag: ABCTF{b1nw4lk_is_us3ful}
		solution: file command say it's png, but file name is jpg, binwalk command says there are two png binary, extract it with binwalk -D='.*' filename. to extract all files. then we can find a png file with the flag.

	Exif:
		flag: flag{3l1t3_3x1f_4uth0r1ty_dud3br0}
		solution: using Exiftool on the to see the flag in the metadata.

	Rubber Duck:
		challenge no: 933
		flag: CTFlearn{ILoveJakarta}
		solution: using exiftool -b filename to extract binary data from metadata to see file. also can be found by `strings filename | grep -i ctf` to see the flag.

	07601:
		challenge no: 97
		flag: ABCTF{Du$t1nS_D0jo}
		solution: binwalk showed binary footprints of 3 zip files. extracted them using binwalk -D='.*' filename. using estrings in one of the zip file we got the flag. `strings filename | grep -i ctf` reveals the flag.

	Git Is Good:
		challenge no: 104
		flag: flag{protect_your_git}
		solution: `unzip filename`. then foud a folder with .git initialized. `git show` command reveals the old commits. and we can see the flag now.

	I'm a dump:
		challenge no: 883
		flag: CTFlearn{fl4ggyfl4g}
		solution: `xxd -d filename` command showed the flag with he.u inpurity replacing the character reveals the real flag.

	Brute Force is Fun!:
		challenge no: 365
		flag: FLAG{may_the_brute_force_be_with_you}
		solution: with `binwalk -D='.*' filename` extract the files. it was a password protected zip file. `running 7z x zipfile` would extract any other files that aren't password protected. found a clue file with password formate ctflag****** where * means a number. generated a custom passfile. `zip2john zipfile > hash` now ready to crack zip with custom dictionary. `john hash --wordlist=custompass` found the password. unzip file with password found another flag.zip file. `unzip flag.zip`. found a base64 encoded text. `echo base64encodedtext | base64 -d`. found the flag.

	Snowboard:
		Challenge no: 934
		flag: CTFlearn{SkiBanff}
		solution: exiftool reveals a fake flag, `file filename` commad reveals a hiddent base64 encoded comment in file type. wich lead us to actual flag.


	PikesPeak:
		challenge no: 935
		flag: CTFlearn{Gandalf}
		solution: `strings PikesPeak.jpg | grep -i ctf` showed many flags with different flag formates. correct one has the correct flag format. flag format is CTFlearn{}

	Tux!:
		challenge no: 973
		flag: CTFlearn{Linux_Is_Awesome}
		solution: exiftool reveals a base64 encode password. found a zip binary footprint in the file with binwalk command. it was a password protected zip file. using the password found previously to unzip it found the flag file.

	PDF by fdpumyp:
		challenge: 957
		flag: CTFlearn{)_1l0w3y0Um00my123}
		solution: using strings, we got base64 encoded messages wich reveals the messy flag.

	Minions:
		challenge no: 955
		flag: CTFlearn{M1NI0NS_ARE_C00L}
		solution: `binwalk -D='.*' filename` extracted the rar file. `unrar x filename` rarreveals MEGA link. can be done with `strings` command. again another jpg file repeating the same process. found YouWin(almost).jpg file. `strings filename` reveals a base64 encoded string. decoding it 4 times reveals the flag.

	Chalkboard:
		challenge no: 972
		flag: CTFlearn{I_Like_Math_2_5}
		solution: have to solved two math equation for x and y. problem can be found in the metadata. 


	Pho Is Tasty!
		challenge no: 971
		flag: CTFlearn{I_Love_Pho!!!}
		solution: `xxd -d filename | head` found the flag mixed with random inpurity.

	Simple Stegnography:
		challenge no: 894
		flag: CTFlearn{this_is_fun}
		solution: found `keyword: myadmin` in metadata of file using exiftool. using `steghide extract -sf filename -xf file -p myadmin` command base64 encoded flag was found.

	GandalfTheWise:
		challenge no: 936
		flag: CTFlearn{Gandalf.BilboBaggins}
		solution: found two base64 encoded data with `file filename` command. xor two of these strings together gives the flag.

	Blank Page:
		challenge no: 959
		flag: CTFlearn{If_y0u_r3/\d_thi5_you_pa553d}
		solution: convert ' ' to 0 and '\u200f' to 1 and read the binary to get the flag.

	abandoned place:
		challenge no: 1000
		flag: CTFlearn{urban_exploration}
		solution: baseline encoding, change the forth value from FF C0 to change hight with hexeditor, to get the flag

	Milk's Best Friend:
		challenge no: 195
		flag: flag{eat_more_oreos}
		solution: `binwalk -D='.*' filename` to extract a hiddent rar file. unrar it to get a jpg file. using `strings filename` to get the flag.

	Digital Camouflage:
		challenge no: 237
		flag: CTFlearn{PApdsjRTae}
		solution: using wireshark, found urlEncoded-->base64encoded password.

	Smiling ASCII:
		challenge no: 903
		flag: CTFlearn{ascii_pixel_flag}
		solution: using `zsteg -a filename` got the flag

	HailCaesar!:
		challenge no : 952
		flag: CTFlearn{Maximus.Decimus.Meridius}
		solution: `strings to get encoded messages. decode that with caesar cipher mod 128 brute forece it. found two scraps of flag combine those two to get the flag key=18 and key=51.

	A CAPture of a Flag:
        	challenge no: 356
        	flag: flag{AFlagInPCAP}
        	solution: open the pcap file with wireshark, and found the base64 encoded flag in the http url parameter.

	Up For A Little Challenge?:
        	challenge no: 142
        	flag: flag{hack_complete}
        	solution: got some intersting password with string. and a mega link, unziping the file got and password protected zip. used previos passwords unziped it to get a image the flag is very very small and can be found on the image.

	Corrupted File:
                challenge no: 138
                flag: flag{g1f_or_j1f}
                solution: In header first 4 common hex digit are missing which is 'GIF8' adding it in the front now we can open the file. using convert file.gif frames.png command we can view and analyze each frame. found base64 encoded flag.	

	Mr.Bin:
		chellenge no: 997
		flag: CTFlearn{y0u_n4il3d_it}
		solution: with exiftool found encoded base64 message decoded into "600x600_picture". with binwalk found encrypted zip file. rockyou didn't help. generate password with `string image.jpg > password` password cracked 'mr_b1n'. unziping the file  found 0's and 1's. turn them into a grayscale png image to found the flag mirrored and clockwise rotated 90degree.

	The adventures of Boris Ivanov. Part 1.:
		challenge no: 373
		flag: flag{d0nt_m3s5_w1th_th3_KGB}
		solution: open the challenge jpg file in stegsolver. used stereogram solver option. slide the image and found the flag at offset 898.

	Exclusive Santa
		challenge no: 851
		flag: CTFleam(Santa_1s_C0ming}
		solution: Downloaded challenge rar file. found 1.png and 3.png after extract the rar. after running `binwalk 3.png` found another png binary. `binwalk -D='.*' 3.png` to extract it. rename it 2.png. with stegsolve xoring image 1.png and 2.png found the flag.

	Naughty Cat:
		challenge no: 890
		flag: CTFlearn{f0r3n51cs_ma5t3r}
		solution: download the challenge file which name is cut3_c4t.png. `binwalk cut3_c4t.png` found that a rar archive is hidding. run `binwalk -D='.*' cut3_c4t.png`. `unrar x filename`. foudn two files. 'purrr_2.mp3' and 'y0u_4r3_cl0s3.rar'. `xxd -d y0u_4r3_cl0s3.rar` found the header is altered. `hexeditor y0u_4r3_cl0s3.rar` and change the header from 'Cat!' to 'Rar!'. it was password protected. after unsing spectrum analyzer found the password "sp3ctrum_1s_y0ur_fr13nd". using the password to unrar found "f1n4lly.txt". found base64 encoded flag in the file.

	Seeing is believing:
		challenge no : 441
		flag: the_flag_is{A_sP3c7r0grAm?!}
		solution: help.me is an .ogg audio file. with sprectrogram in SonicAnalyzer found a qr code. scanning it lead me to a pastbin.com url where I found the flag.

	MountainMan:
		challenge no: 888
		flag : CTFlearn{Ubuntu_r0ck5}
		solution: as the clue said there are two ff d9 marker in jpg file. so copied all the hex values after the first ff d9 flag then check it with the known text CTFlearn{, found a common key 203 so xor the hex with the value to found the whole flag.

	Music To My Ears:
		challenge no : 220
		flag : CTFlearn{1_c4n_f1x_it}
		solution: first 32 bytes are all wrong in the m4a file header. 1st 4 bytes represents ftyp block size including itself. wich is 32. ftypM4A_ followed by 4 bytes of 00. after editing first 32 bytes we can here the flag.

	The Keymaker:
		challenge no: 912
		flag : CTFlearn{Ne0.TheMatrix}
		solution : sos(start of scan) 'ff da' copy 32 bytes of hex after the marker that will be the key, and sof0(start of frame) 'ff c0', iv started after 2bytes for 'ffc0' as the clue said. fuck the clue. so copy 16 bytes of hex after 2bytes of marker.


















WEB:
	Don't Bump Your Head(er):
		challenge no: 109
		flag: flag{did_this_m3ss_with_y0ur_h34d}
		solution: a simple command solved the problem. curl -v -A "Sup3rS3cr3tAg3nt" -H "Referer: awesomesauce.com"  http://165.227.106.113/header.php

	
	POST Practice:
		challenge no: 114
		flag: flag{p0st_d4t4_4ll_d4y}
		solution: a simple curl command solved the challenge.  `curl -X POST -d "username=admin&password=71urlkufpsdnlkadsf" -v http://165.227.106.113/post.php`

	Calculat3 M3:
		challenge no: 150
		flag: ctf{watch_0ut_f0r_th3_m0ng00s3}
		solution: send `;ls` as an expression gives the list of file names in that directory. don't know how and why?













Miscellaneous:
	
	Time Traveller:
		challenge no: 1072
		flag: CTFlearn{today@nasa.gov}
		solution: waybackmachine helped me to solve this.

	Where Can My Robot Go?:
        challenge no: 107
        flag: CTFlearn{r0b0ts_4r3_th3_futur3}
        solution: robots.txt in ctflearn.com/robots.txt , browser the html page to find the flag.

    Wikipedia:
        challenge no: 168
        flag: CTFlearn{cNi76bV2IVERlh97hP}
        solution: search the ip in wikipedia. found the flag part in the wiki page.

    QR Code:
        challenge no: 228
        flag: CTFlearn{n0_body_f0rget_qr_code}
        solution: scan the qr --> got base64 --> decode base64 code --> meaningless maybe rot13 --> decode with rot13 to get the message.

    What could this be?
		challenge no: 268
		flag: flag{5uch_j4v4_5crip7_much_w0w}
		solution: the code is written in jsfuck language, online jsfuck decoder can help.

	Ambush Mission:
		challenge no: 274
		flag: CTFlearn{m3Et_me_4t_12_aM}
		solution: `java -jar stegsolve.jar` . click left or right arrow to see the changes. finnaly got the morrred base64 string at Red plane 0.

	Help Bity:
		challenge no: 454
		flag: CTFLearn{b1nary_1s_awes0me}
		solution: xored with 1.

	My Friend John:
		challenge no: 1135
		flag: CTFlearn{s0_n0W_y0uv3_M3t_J0hN}
		solution: john the ripper hellped use these options `zip2john enc.zip > hash`,  `--wordlist=wordlist`, `--incremental=Digits` to solve the challenge.

	Rock Paper Scissors:
		challenge no: 885
		flag: CTFlearn{r0ck_p4per_skiss0rs}
		solution: use two connection and check the responces. the responses are identical all the time.

	Get Into Command Mission:
	    challenge no: 278
	    flag: CTFlearn{Arm0uR_pPTi4}
	    solution: open the file in ghidra and saw the username and password was ALDI, 384, found base64 string of a png, used cyberchef to getp the png file.
		




















Binary:
	Simple bof:
		Challenge no: 1010
		flag: CTFlearn{buffer_0verflows_4re_c00l!}
		Solution: C code reveals that gets used which is vulnerable to buffer overflow.

	Reykjavik:
		challenge no: 990
		flag: CTFlearn{Eye_L0ve_Iceland_}
		Solution: have to found the global variable address <data> then print memory location of <data>. perform xor operation with those values.

	Lazy Game Challenge:
		challenge no: 691
		flag: CTFlearn{d9029a08c55b936cbc9a30_i_wish_real_betting_games_were_like_this!}
		Solution: bet with a negetive value and after losing the game it will do this operation a - (-b) so a+b. losing the game is winning the game. `nc thekidofarcrania.com 10001`

	RIP my bof:
		challenge no: 1011
		flag: CTFlearn{c0ntr0ling_r1p_1s_n0t_t00_h4rd_abjkdlfa}
		Solution: simple buffer overflow just don't change the instruction section and update the memory address in the right place to call an inbuilt function. solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/binary/RIPmybof/attack.sh
	












Cryptography:
	Character Encoding:
		challenge no: 115
		flag: ABCTF{45C11_15_U53FUL}
		Solution: character encoded in ASCII hexadecimal, solved with cyberchef(from hex)

	Base 2 2 the 6:
		challenge no: 192
		flag: CTF{FlaggyWaggyRaggy}
		Solution: encoded in base64. solved with command `echo "Q1RGe0ZsYWdneVdhZ2d5UmFnZ3l9" | base64 -d` 

	Morse Code:
		challenge no: 309
		flag: FLAGSAMUELMORSEISCOOLBYTHEWAYILIKECHEES
		Solution: Morse Code, solved with cyberchef (from morse code)

	Vigenere Cipher:
		challenge no: 305
		flag: flag{CiphersAreAwesome}
		Solution: simple vigenere cipher, solved by my own algorithm writen years ago, https://github.com/theCodePy/encryption-algorithms/blob/main/vigenere_cipher.py, also can be solved by cyberchef (vigenere decode).

	BruXOR:
		challenge no: 227
		flag: flag{y0u_Have_bruteforce_XOR}
		solution : solved this problem by writing a python script, simple xor known plaintext attack, script link--> https://github.com/theCodePy/CTF/blob/main/ctflearn/cryptography/BruXOR/_xor.py

	Reverse Polarity:
		challenge no: 230
		flag: CTF{Bit_Flippin}
		solution: simple binary to text conversion, solved this with python, script_Link--> https://github.com/theCodePy/CTF/blob/main/ctflearn/cryptography/ReversePolarity/ReversePolarity.py

	Hextroadinary:
		challenge no: 158
		flag: 0xc0ded
		solution: just xor those hex values and convert it into hex.

	HyperStream Test #2:
		challenge no: 443
		flag: ILOUEBACONDONTYOU
		solution: decoded that cipher from decode.fr website, it was BACON CIPHER, also known as BACONIAN CIPHER,

	Modern Gaius Julius Caesar:
		challenge no: 885
		flag: CTFlearn{Cyb3r_Cae54r}
		solution: it was a caesar cipher but using qwerty keyboard rows to encrypt and decrypt. mannually substract with key 2.

	Suspecious message:
		challenge no: 887
		flag: CTFlearn{Pl4Yf41R_1S_C00l_c1PheRrRR}
		solution: play fair cipher
	
	Tone dialing:
		challenge no: 889
		flag: CTFlean{CRYPTOGRAPHY}
		solution: https://dtmf.netlify.app/ use this site to decode DTMF and convert the decimals into ASCII
	
	The Safest Encryption:
		challenge no: 1092
		flag: CTFlearn{CTFlearn_is_fun_hope_you_enjoyed_it!}
		solution: xor two files together to get a decrypted pdf file. that txt file is the key for encrypted pdf.

	RSA Beginner :
		challenge no: 119
		flag: abctf{rs4_is_aw3s0m3}
		solution: got prime factors from factordb. calculate message from rsa calculator. then convert the long_to_bytes().

	Substitution Cipher:
		challenge no: 238
		flag: ifonlymoderncryptowaslikethis
		solution: frequency analysis of english alphabets, use grep and a english dictionary. cryptography

	RSA Noob:
		challenge no: 120
		flag: abctf{b3tter_up_y0ur_e}
		solution: e was 1, almost not encrypted text.

	5x5 Crypto:
		challenge no: 263
		flag: CTF{THUMBS_UP}
		solution: reading the description it's very easy to solve. see this solution from github: https://github.com/theCodePy/CTF/blob/main/ctflearn/cryptography/5x5_Crypto/solution.txt

	ALEXCTF CR2: Many time secrets:
		challenge no: 117
		flag: ALEXCTF{HERE_GOES_THE_KEY}
		solution : manually checking for answers. finding the key was the first challenge. then I realized that the flag is the key. manually analyzed the encrypted message with python. decrypt the english message by guessiing the next letter of the word.

	Zippy.zip:
		challenge no: 1022
		flag: CTFlearn{s0m3t1m35_u$1ng_h4rd_p4s5w0rd_i5_n0t_3n0ugh}
		Solution: the encrypted zip contains very small size of plaintext (4 bytes) file so bruteforcing the plaintext possible by checking it with checksum CRC value (Cyclic Redundency Check). checksum is computed from all the contents from the entries of zip file. checksum is calculated before encryption. solution python code github_link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/cryptography/Zippy.zip/computeCRC.py

	CoppeRSA Lattice:
		challenge no: 859
		flag: CTFlearn{n0t_th4t_s3cur3_4ft3r_4ll}
		solution: by looking into that RSA code I known that p and q are very close. so we can easily factorise the n. Let s = ( p + q) / 2 and t = ( p - q) / 2. Note that s is close to √n. Then, n = p * q = (s + t) * (s - t) = s2 - t2. If s is close to √n, then t2 = s2 - n and finding t would lead to p = s + t and q = s - t. Note that (s2 -n) is a perfect square. solution python code github_link written by me --> https://github.com/theCodePy/CTF/blob/main/ctflearn/cryptography/CoppeRSA_Lattice/Prime_factor.py

	Polycrypto:
		challenge no: 547
		flag: flag{p0lynom1als_4r3_k00l}
		solution: the polynomial represents a banary number. just convert it back to binary then Decimal and then ASCII text. python code --> https://github.com/theCodePy/CTF/blob/main/ctflearn/cryptography/Polycrypto/polycrypto.py

	Image Editing:
		challenge no: 717
		flag: 1_kn3W_tH3_r3D_w4s_0ff
		solution: using zsteg found a png file extracted data using `zsteg -E "b1,r,lsb,xy" final.png > another.png`. then use the zsteg on the extracted png file to get the flag.

	So many 64s:
		challenge no: 121
		flag: ABCTF{pr3tty_b4s1c_r1ght?}
		solution: decode base64 32 times to get the flag.

	Encryption Master:
		challenge no: 243
		flag: CTF{I_AM_PROUD_OF_YOU}
		solution: base64 --> from hex to ascii --> from binary to ascii --> base64 

	RSA Twins!:
		challenge no: 484
		flag: flag{i_l0v3_tw1N_pr1m3s}
		Solution: we can easily factorise the n. as primes are too close. Let s = ( p + q) / 2 and t = ( p - q) / 2. Note that s is close to √n. Then, n = p * q = (s + t) * (s - t) = s2 - t2.  n=s2-t2. If s is close to √n, then t2 = s2 - n and finding t would lead to p = s + t and q = s - t. Note that (s2 -n) is a perfect square. solution python code github_link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/cryptography/RSATwins/twin.py

	The Simpsons:
		challenge no: 160
		flag: CTFlearn{wearenumberone}
		solution: string image.jpg --> found clues about keys --> octal key number to decimal --> printable character converted into ascii --> found another clue --> what does maggie cost in simpson // 8  + 4 --> key=key+key+(key-4) --> decrypt with viganere chipher. found the flag. solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/cryptography/TheSimpsons/decode.py

	XOR Is Friend Not Food:
		challenge no: 165
		flag: ctflearn{xor_is_the_goop}
		solution: simple reverse the xor key to find the key, the key was `jowls` solution link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/cryptography/XORIsFriendNotFood/xorisfood.py

	





















Programming:
	Adoni Assembler Chall:
		challenge no: 1026
		flag: CTFlearn{Kurn00l_District}
		solution: have to edit a line in the assambly programme. adding "call _printflag" will print the flag. or copy the instructions of printing adoni from the _printflag function to the _start function will also print the flag. $ nasm -f elf64 file.asm -o obj.o ; $ ld obj.o -o executable ; 

	The Credit Card Fraudster:
		challenge no: 970
		flag: CTFlearn{5432103279251234}
		solution: credit card validation programme. have to implement the Luhn Algorithm to valid a credit card number. 1. multiply each digit with the weight pattarn 2,1,2,1,2,1.. and so on. 2. if the product is double digit add them. 3. now add all products. 4. if the sum of all product is multiplied by 10 then the credit card number is valid. github link of solution --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/The_Credit_Card_Fraudster/fraud_card_number.py

	AndhraPradesh Assembler Chall:
		challenge no: 1030
		flag: CTFlearn{Hyderabad_Telugu}
		solution: je = jump if equal, jne = jump if not equal, ja = jump if first operand is greater, jb = jump if fitst operand is less than second. al lower bit, ah is higher bit of ax register. 

	Impossible equation:
		challenge no: 1234
		flag: CTFlearn{ju5t_4_m0dul0_3qu4t10n}
		Solution : binary reverse multiplication with the answer buffer of same size. python code github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/Impossible_equation/Impossible.py

	Simple Programming:
		challenge no: 174
		flag: CTFlearn{6662}
		solution: count the no of zero and one the condition says OR operation. solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/SimpleProgramming/numberof10.py

	Image magic:
		challenge no: 89
		flag: flag{cool_right?}
		solution: using PIL librery in python. `img=Image.open("out copy.jpg")` # to open the img. `pix = img.load()` to load pixel `Image.new("RGB" (w, h))` to open new. `pix[w, h]` to access or assignment. solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/ImageMagic/imageMagic.py

	Symbolic Decimals:
		challenge no: 231
		flag: CTF{Star_._Wars_._For_._Life}
		solution: just convert the symbols into number, and then those decimal number into ascii. simple.. solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/cryptography/SymbolicDecimals/SymbolicDec_decryptor.py

	Python Reversal:
		challenge no: 449
		flag: cyber{Fl4g_b4ckw4rds_15_g4lF}
		solution: python reverse successfully it was easy solution link github --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/PythonReversal/reversed.py

	The Adventures of Boris Ivanov Part 2:
		challenge no: 382
		flag: flag{th3_KGB_l0v3s_CTF}
		solution: using Image from PIL in python solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/TheAdventuresofBorisIvanovPart2/glue_photo.py

	Programming a language:
		challenge no: 1050
		flag: CTFlearn{pr0gr4mm1ng_pr0gr4mm1ng_l4ngu4g3s?}
		solution: just program the stack with the information that's all. solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/Programmingalanguage/stack.py

	Is it the Flag? (JAVA):
		challenge no: 197
		flag: 0gHzxY
		solution: wrote java code for the first time.. too many manual statements. github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/IsittheFlagJAVA/IsItTheFlag.java

	Read in Color:
		challenge no: 670
		flag: flag{c0l0r_c0d3d}
		solution: the rgb color color code pixel values in decimal are itself the ascii code. python solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/ReadinColor/read_from_color.py

	Bit by Bit:
		challenge no: 435
		flag: 1498952
		solution: solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/BitbyBit/bitByBit.py

	Dawn's Lawn:
		challenge no: 434
		flag: 194
		solution: formatting the input according to how she mowing to easily access values, solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/DawnsLawn/lawn_mowing.py

	Fabio's Nachos:
		challenge no: 459
		flag: flag{f1b0n4ch0}
		solution: base64 decode --> febonacci series --> add 1 --> flag. solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/FabiosNachos/DecipherFibonacii.py

	Tony Stark's Message:
		challenge no: 986
		flag: CTFlearn{Why_Can’t_I_Sleep?}
		solution: the pickle data was of a tree data type, after appling huffman encoding technique to decode data from the tree, I got base64 encoded flag. solution github link -->  https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/TonyStarksMessage/huffmanDecoding.py

	An Old Image:
		challenge no: 1133
		flag: CTFlearn{how_can_swapping_columns_hide_a_qr_code}
		solution: PIL, x,y,r,g column swapping, with PIL and ittertool, solved with python, solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/AnOldImage/fix_image.py

	Ten Thousand Hours:
		challenge no: 161
		flag: flag{r3ndomly_g3nerat3d_m3th0dS_FTW}
		solution: 40 thousand lines of code, 5000 functions to encrypt the flag, yet all the function and methods have the same 3-4 type of pattern in common, follow the pattern to grab the unique values and make the decryption function for them. solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/TenThousandHours/decrypt_mucho.py

	Jumping Chain Hash:
		challenge no: 436
		flag: theblockchainwillconsumeyou
		solution: he was just messing with us with all the extra information. just check the first block that was added of left chain and add + 1 to it.. solved.

	Antigua:
		challenge no: 1275
		flag: CTFlearn{FreeT0wn.P1cadilly}
		solution: the rust challenge has been debugged successfully. problems were mostly with datatypes. return formate and function calling format. solution github link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/Antigua/main.rs

	Keyboard Prodigy:
		challenge no: 433
		flag: 276
		solution: after understanding the description, found some properties that will satisfy even if the keys are suffled. 1. only one key must appeared exectly 2 times other keyes must apear one times. 2. all the keys must be in the major scale of that key exectly one time. github solution link --> https://github.com/theCodePy/CTF/blob/main/ctflearn/programming/KeyboardProdigy/majorScaleChecker.py
















Reverse Engineering:
	PIN:
		challenge no: 379
		flag: CTFlearn{333333}
		solution: open ghidra to analys the binary found a variable name "valid" which is a global variable equal to 333333. that's the pin.

	RE_verseDIS:
		challenge no: 188
		flag: AbCTF{r3vers1ng_dud3}
		solution: using gdb and ghidra. checking global variables. info variables ^name$. x/s view string. x/22d view integer array of 22 dicimal values. break to set breakpoint. next to execute 1 line in c. nexti to execute 1 assambly instructions.
